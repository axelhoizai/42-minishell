# Résumé des fonctions

## Fonctions `readline`
- **`readline`** : Lit une ligne de texte avec une interface interactive (édition, historique).
- **`rl_clear_history`** : Efface tout l'historique des commandes.
- **`rl_on_new_line`** : Indique qu’une nouvelle ligne a été commencée.
- **`rl_replace_line`** : Remplace la ligne courante par une nouvelle chaîne.
- **`rl_redisplay`** : Réaffiche la ligne courante après modification.

## Historique
- **`add_history`** : Ajoute une commande à l'historique.

## Entrée/Sortie
- **`printf`** : Affiche une chaîne formatée.
- **`write`** : Écrit des données dans un fichier ou descripteur.
- **`read`** : Lit des données depuis un fichier ou descripteur.
- **`access`** : Vérifie les permissions d’un fichier.
- **`open`** : Ouvre un fichier et retourne un descripteur.
- **`close`** : Ferme un descripteur de fichier.

## Gestion de la mémoire
- **`malloc`** : Alloue dynamiquement de la mémoire.
- **`free`** : Libère la mémoire précédemment allouée.

## Gestion des processus
- **`fork`** : Crée un nouveau processus.
- **`wait`** : Attend la fin d’un processus enfant.
- **`waitpid`** : Attend un processus enfant spécifique.
- **`wait3`** : Attend un processus enfant avec des statistiques supplémentaires.
- **`wait4`** : Similaire à `wait3`, mais avec des options détaillées.

## Gestion des signaux
- **`signal`** : Associe un gestionnaire à un signal.
- **`sigaction`** : Configure une action pour un signal spécifique.
- **`sigemptyset`** : Initialise un ensemble de signaux vide.
- **`sigaddset`** : Ajoute un signal à un ensemble de signaux.
- **`kill`** : Envoie un signal à un processus ou groupe de processus.

## Gestion des répertoires
- **`opendir`** : Ouvre un répertoire.
- **`readdir`** : Lit une entrée dans un répertoire.
- **`closedir`** : Ferme un répertoire ouvert.

## Fichiers et chemins
- **`getcwd`** : Récupère le répertoire de travail courant.
- **`chdir`** : Change le répertoire de travail courant.
- **`stat`** : Récupère des informations sur un fichier.
- **`lstat`** : Similaire à `stat`, mais pour les liens symboliques.
- **`fstat`** : Récupère des informations sur un fichier via son descripteur.
- **`unlink`** : Supprime un fichier.

## Gestion des commandes
- **`execve`** : Remplace le processus courant par un programme.

## Gestion des flux
- **`dup`** : Duplique un descripteur de fichier.
- **`dup2`** : Duplique un descripteur sur un autre descripteur.
- **`pipe`** : Crée un canal pour la communication entre processus.

## Gestion des erreurs
- **`strerror`** : Retourne une description d’un code d’erreur.
- **`perror`** : Affiche un message d'erreur basé sur `errno`.

## Terminal
- **`isatty`** : Vérifie si un descripteur est associé à un terminal.
- **`ttyname`** : Retourne le nom du terminal associé à un descripteur.
- **`ttyslot`** : Identifie la session du terminal courant.
- **`ioctl`** : Effectue une commande de contrôle sur un périphérique.

## Variables d’environnement
- **`getenv`** : Récupère la valeur d'une variable d’environnement.

## Paramètres du terminal
- **`tcsetattr`** : Modifie les paramètres du terminal.
- **`tcgetattr`** : Récupère les paramètres actuels du terminal.

## Fonctions `termcap`
- **`tgetent`** : Initialise la base de données termcap.
- **`tgetflag`** : Vérifie une capacité booléenne du terminal.
- **`tgetnum`** : Récupère une valeur numérique pour une capacité.
- **`tgetstr`** : Récupère une chaîne associée à une capacité.
- **`tgoto`** : Génère une séquence pour déplacer le curseur.
- **`tputs`** : Écrit une chaîne termcap avec un contrôle du débit.
